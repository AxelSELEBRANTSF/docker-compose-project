version: '3.8'

services:
  # Service pour le container backend
  adonisjs-app:
    build:
      context: ./back
    ports:
      - '${PORT}:3333'
    volumes: 
      -  ./back:/app
      -  /app/node_modules  
    # Variable d'environnement correspondant au .env dans le back
    environment:
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - HOST=${HOST}
    depends_on:
      - postgresql
    networks:
      - docker-project
    restart: always

  # Service pour le container frontend
  react-app:
    build:
      context: ./front
    ports:
      - '5000:5000'
    environment:
      NODE_ENV: development
      URL_API: http://127.0.0.1:3333/
    volumes:
      -  ./front:/app
      -  /app/node_modules
    networks:
      - docker-project
    restart: always

  # Service pour le container postgresql
  postgresql:
    image: postgres:13
    environment:
      # A modifier pour une meilleure sécuriter
      POSTGRES_USER: adonis
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: adonis
    ports:
      - '${DB_PORT}:5432'
    networks:
      - docker-project
    volumes:
      # Sauvegarde des données + création des tables
      # lorsque le container est down
      - postgresql-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql 

# Création du volume pour la base de données
volumes:
  postgresql-data:

# Création du network pour mettre les containers 
# dans un même réseau afin qu'il puisse communiquer
# plus facilement entre eux.
networks:
  docker-project:
    driver: bridge
